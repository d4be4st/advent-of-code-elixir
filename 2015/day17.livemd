# Day 17

```elixir
Mix.install([
  {:kino, "~> 0.7.0"}
])
```

## Input

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input = Kino.Input.textarea("input")
```

```elixir
containers =
  input
  |> Kino.Input.read()
  |> String.split("\n")
  |> Enum.map(&String.to_integer/1)

eggnog_liters = 150
```

## Shared

```elixir
defmodule Utils do
  def combine(collection, k) when is_integer(k) and k >= 0 do
    list = Enum.to_list(collection)
    list_length = Enum.count(list)

    if k > list_length do
      raise Enum.OutOfBoundsError
    else
      do_combine(list, list_length, k, [], [])
    end
  end

  defp do_combine(_list, _list_length, 0, _pick_acc, _acc), do: [[]]
  # optimization
  defp do_combine(list, _list_length, 1, _pick_acc, _acc), do: list |> Enum.map(&[&1])

  defp do_combine(list, list_length, k, pick_acc, acc) do
    list
    |> Stream.unfold(fn [h | t] -> {{h, t}, t} end)
    |> Enum.take(list_length)
    |> Enum.reduce(acc, fn {x, sublist}, acc ->
      sublist_length = Enum.count(sublist)
      pick_acc_length = Enum.count(pick_acc)

      if k > pick_acc_length + 1 + sublist_length do
        # insufficient elements in sublist to generate new valid combinations
        acc
      else
        new_pick_acc = [x | pick_acc]
        new_pick_acc_length = pick_acc_length + 1

        case new_pick_acc_length do
          ^k -> [new_pick_acc | acc]
          _ -> do_combine(sublist, sublist_length, k, new_pick_acc, acc)
        end
      end
    end)
  end
end
```

## Part 01

```elixir
1..Enum.count(containers)
|> Enum.flat_map(fn size ->
  Utils.combine(containers, size)
end)
|> IO.inspect()
|> Enum.filter(fn combination ->
  Enum.sum(combination) == eggnog_liters
end)
|> Enum.count()
```

## Part 02

```elixir
containers_counts =
  1..Enum.count(containers)
  |> Enum.flat_map(fn size ->
    Utils.combine(containers, size)
  end)
  |> Enum.filter(fn combination ->
    Enum.sum(combination) == eggnog_liters
  end)
  |> Enum.map(&Enum.count/1)

min_containers = Enum.min(containers_counts)
Enum.count(containers_counts, fn c -> c == min_containers end)
```
