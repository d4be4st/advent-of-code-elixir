# Day X

```elixir
Mix.install([
  {:kino, "~> 0.7.0"}
])
```

## Input

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input = Kino.Input.textarea("input")
```

## Shared

```elixir
defmodule Utils do
  def parse(input) do
    input
    |> String.split("\n")
    |> Enum.map(fn line ->
      line
      |> String.split("/")
      |> Enum.map(&String.to_integer/1)
      |> Enum.sort()
    end)
    |> Enum.sort()
  end

  def run(list) do
    process(find_next(list, 0), list, [], [])
    |> Kernel.elem(1)
    |> Enum.map(&List.flatten/1)
    |> Enum.max_by(&Enum.sum/1)
  end

  def process([], _, current_acc, acc), do: {current_acc, acc}

  def process([{node, number} | rest], remaining, current_acc, acc) do
    # if number == 13,do: throw 1
    remaining = remaining -- [node]
    {new_acc, acc} = process(find_next(remaining, number), remaining, [node | current_acc], acc)
    process(rest, remaining, current_acc, [new_acc | acc])
  end

  def find_next(list, number) do
    Enum.filter(list, fn node -> Enum.member?(node, number) end)
    |> Enum.map(fn node -> {node, other(node, number)} end)
  end

  def other(node, number), do: List.first(node -- [number])
end

"0/2
2/2
2/3
3/4
3/5
0/1
10/1
9/10"
|> Utils.parse()
|> Utils.run()
```

## Part 01

```elixir
defmodule AOC17.Day24 do
  @input input
         |> Kino.Input.read()
         |> String.split("\n", trim: true)
         |> Enum.map(fn l ->
           String.split(l, "/") |> Enum.map(&String.to_integer/1)
         end)

  def state() do
    @input
    |> Enum.flat_map(& &1)
    |> Enum.uniq()
    |> Enum.reduce(%{}, fn n, m ->
      Map.put(m, n, Enum.filter(@input, fn x -> n in x end))
    end)
  end

  def run() do
    s = state()

    Enum.map(s[0], fn x ->
      process(x, s, MapSet.new([x]), 0, Enum.sum(x), 0)
    end)
    |> Enum.max_by(&elem(&1, 1))
    |> elem(0)
  end

  def process(start, state, m, n, acc, len) do
    m = MapSet.put(m, start)
    b = part(start, n)
    connected = connected(state, b, m)

    if connected == [] do
      {acc, len}
    else
      connected
      |> Enum.map(fn c ->
        process(c, state, m, b, acc + Enum.sum(c), len + 1)
      end)
      |> Enum.sort_by(&elem(&1, 0), &>=/2)
      # change 1 to 0 for part_one
      |> Enum.max_by(&elem(&1, 0))
    end
  end

  def connected(state, n, m),
    do: state[n] |> Enum.reject(&MapSet.member?(m, &1))

  def part(x, n), do: (x -- [n]) |> hd()
end

AOC17.Day24.run()
```

```elixir
input
|> Kino.Input.read()
|> Utils.parse()
|> Utils.run()
```

## Part 02

```elixir
input
|> Kino.Input.read()
```
