# Day 05

## Input

```elixir
secret = "reyedfim"
```

## Shared

```elixir
defmodule Utils do
  def find_password(_secret, _index, password, 8), do: password |> Enum.reverse() |> Enum.join()

  def find_password(secret, index, password, password_count) do
    case :crypto.hash(:md5, secret <> Integer.to_string(index)) |> Base.encode16() do
      "00000" <> <<char>> <> _rest ->
        find_password(secret, index + 1, [[char] | password], password_count + 1)

      _ ->
        find_password(secret, index + 1, password, password_count)
    end
  end
end
```

```elixir
defmodule Utils2 do
  def find_password(_secret, _index, password, 8), do: password |> Enum.join()

  def find_password(secret, index, password, password_count) do
    case :crypto.hash(:md5, secret <> Integer.to_string(index)) |> Base.encode16() do
      "00000" <> <<i>> <> <<char>> <> _rest when i <= ?7 ->
        new_password =
          if is_nil(Enum.at(password, i - ?0)) do
            List.replace_at(password, i - ?0, [char])
          else
            password
          end

        find_password(
          secret,
          index + 1,
          new_password,
          Enum.count(new_password, fn x -> !is_nil(x) end)
        )

      _ ->
        find_password(secret, index + 1, password, password_count)
    end
  end
end
```

## Part 01

```elixir
Utils.find_password(secret, 1, [], 0)
```

## Part 02

```elixir
Utils2.find_password(secret, 1, [nil, nil, nil, nil, nil, nil, nil, nil], 0)
```
