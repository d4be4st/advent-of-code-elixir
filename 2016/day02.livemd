# Day 02

```elixir
Mix.install([
  {:kino, "~> 0.7.0"}
])
```

## Input

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input = Kino.Input.textarea("input")
```

## Shared

```elixir
defmodule Utils do
  def keypad1 do
    %{
      {1, 1} => 1,
      {2, 1} => 2,
      {3, 1} => 3,
      {1, 2} => 4,
      {2, 2} => 5,
      {3, 2} => 6,
      {1, 3} => 7,
      {2, 3} => 8,
      {3, 3} => 9
    }
  end

  def keypad2 do
    %{
      {3, 1} => 1,
      {2, 2} => 2,
      {3, 2} => 3,
      {4, 2} => 4,
      {1, 3} => 5,
      {2, 3} => 6,
      {3, 3} => 7,
      {4, 3} => 8,
      {5, 3} => 9,
      {2, 4} => "A",
      {3, 4} => "B",
      {4, 4} => "C",
      {3, 5} => "D"
    }
  end

  def find_digit(instructions, coord, digits, keypad) do
    end_coord =
      instructions
      |> Enum.reduce(coord, fn
        "U", {x, y} ->
          if Map.get(keypad, {x, y - 1}), do: {x, y - 1}, else: {x, y}

        "D", {x, y} ->
          if Map.get(keypad, {x, y + 1}), do: {x, y + 1}, else: {x, y}

        "L", {x, y} ->
          if Map.get(keypad, {x - 1, y}), do: {x - 1, y}, else: {x, y}

        "R", {x, y} ->
          if Map.get(keypad, {x + 1, y}), do: {x + 1, y}, else: {x, y}
      end)

    {end_coord, [Map.get(keypad, end_coord) | digits]}
  end
end
```

## Part 01

```elixir
{_, digits} =
  input
  |> Kino.Input.read()
  |> String.split("\n")
  |> Enum.reduce({{2, 2}, []}, fn line, {current_coord, digits} ->
    line
    |> String.graphemes()
    |> Utils.find_digit(current_coord, digits, Utils.keypad1())
  end)

digits
|> Enum.reverse()
|> Enum.join()
```

## Part 02

```elixir
{_, digits} =
  input
  |> Kino.Input.read()
  |> String.split("\n")
  |> Enum.reduce({{1, 3}, []}, fn line, {current_coord, digits} ->
    line
    |> String.graphemes()
    |> Utils.find_digit(current_coord, digits, Utils.keypad2())
  end)

digits
|> Enum.reverse()
|> Enum.join()
```
